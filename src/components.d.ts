/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface MiButton {
    'outline': boolean;
    'text': string;
  }
  interface MiButtonAttributes extends StencilHTMLAttributes {
    'outline'?: boolean;
    'text'?: string;
  }

  interface MiCircleButton {
    'outline': boolean;
    'text': string;
    'withPlus': boolean;
    'withX': boolean;
  }
  interface MiCircleButtonAttributes extends StencilHTMLAttributes {
    'outline'?: boolean;
    'text'?: string;
    'withPlus'?: boolean;
    'withX'?: boolean;
  }

  interface MiSelectionCard {
    'description': string;
    'extraInfo': string;
  }
  interface MiSelectionCardAttributes extends StencilHTMLAttributes {
    'description'?: string;
    'extraInfo'?: string;
  }

  interface MiDrawer {
    'visible': boolean;
  }
  interface MiDrawerAttributes extends StencilHTMLAttributes {
    'visible'?: boolean;
  }

  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'MiButton': Components.MiButton;
    'MiCircleButton': Components.MiCircleButton;
    'MiSelectionCard': Components.MiSelectionCard;
    'MiDrawer': Components.MiDrawer;
    'MyComponent': Components.MyComponent;
  }

  interface StencilIntrinsicElements {
    'mi-button': Components.MiButtonAttributes;
    'mi-circle-button': Components.MiCircleButtonAttributes;
    'mi-selection-card': Components.MiSelectionCardAttributes;
    'mi-drawer': Components.MiDrawerAttributes;
    'my-component': Components.MyComponentAttributes;
  }


  interface HTMLMiButtonElement extends Components.MiButton, HTMLStencilElement {}
  var HTMLMiButtonElement: {
    prototype: HTMLMiButtonElement;
    new (): HTMLMiButtonElement;
  };

  interface HTMLMiCircleButtonElement extends Components.MiCircleButton, HTMLStencilElement {}
  var HTMLMiCircleButtonElement: {
    prototype: HTMLMiCircleButtonElement;
    new (): HTMLMiCircleButtonElement;
  };

  interface HTMLMiSelectionCardElement extends Components.MiSelectionCard, HTMLStencilElement {}
  var HTMLMiSelectionCardElement: {
    prototype: HTMLMiSelectionCardElement;
    new (): HTMLMiSelectionCardElement;
  };

  interface HTMLMiDrawerElement extends Components.MiDrawer, HTMLStencilElement {}
  var HTMLMiDrawerElement: {
    prototype: HTMLMiDrawerElement;
    new (): HTMLMiDrawerElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLElementTagNameMap {
    'mi-button': HTMLMiButtonElement
    'mi-circle-button': HTMLMiCircleButtonElement
    'mi-selection-card': HTMLMiSelectionCardElement
    'mi-drawer': HTMLMiDrawerElement
    'my-component': HTMLMyComponentElement
  }

  interface ElementTagNameMap {
    'mi-button': HTMLMiButtonElement;
    'mi-circle-button': HTMLMiCircleButtonElement;
    'mi-selection-card': HTMLMiSelectionCardElement;
    'mi-drawer': HTMLMiDrawerElement;
    'my-component': HTMLMyComponentElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
